이번 실습에서는 반복하여 특정 문장을 수행하는 while과 for에 대해서 공부해보도록하겠습니다. 이런 while문과 for문을 반복문이라고 합니다. 

먼저 while은 조건문 파트와 내용 파트로 나누어져있습니다. 아래의 예시 코드를 보겠습니다.

treehit=0
while treehit<10:
    treehit=treehit+1
    print("나무를 %d 번 찍었습니다." % treehit)
    if treehit==10:
        print("나무가 넘어갑니다.")
 
(결과)
나무를 1번 찍었습니다.
나무를 2번 찍었습니다.
.
.
.
나무를 10번 찍었습니다.
나무가 넘어갑니다.


while 앞에 treehit<10 부분이 바로 조건문 파트입니다. 먼저 while문의 조건부 파트에서 먼저 treehit의 값이 10보다 작은지 확인하게 되는데, treehit의 값이 0이므로 조건부 파트가 True가 되어 아래의 내용 파트를 실행하게 됩니다. 
내용 파트에서는 treehit의 값을 1만큼 증가시키고 찍은 횟수를 출력하며, treehit의 값이 10인지를 확인합니다. 이렇게 한번의 내용 파트 사이클이 끝나면 다시 while문의 조건부 파트로 돌아가 같은 내용을 반복하게 됩니다. 

treehit의 값이 9일때를 생각해볼까요? treehit의 값이 9일때 마찬가지로 내용 파트를 한 줄씩 수행하며 값이 1증가하여 10이 되고 나무를 10번찍었다는 내용을 출력하고 treehit의 값이 10인지를 확인합니다. 이때는 조건문을 실행하여 나무가 넘어간다는 문장을 출력하겠죠. 그러고 다시 조건부 파트로 와서 값을 확인하는데, 이때는 값이 10으로 조건부 파트의 조건을 만족하지 못하여 False값을 가지기 때문에 while문을 탈출하게 됩니다. 

그렇다면 while문에서 강제로 탈출하는 방법은 없을까요? 만약 루프가 끝나기 전에 반복문을 탈출하고 싶다면 break를 사용하면 됩니다. break는 호출되면 자신을 감싸고 있는 while문을 강제로 탈출하게 해줍니다. 아래의 예시 코드를 보겠습니다.

treehit=0
while treehit<10:
    treehit=treehit+1
    print("나무를 %d 번 찍었습니다." % treehit)
    if treehit==5:
        print("나무가 아파합니다.")
        break
        
(결과)
나무를 1번 찍었습니다.
나무를 2번 찍었습니다.
.
.
.
나무를 5번 찍었습니다.
나무가 아파합니다.


위의 코드에서 while문 안의 if문을 보면, treehit가 5일때 나무가 아프다는 문구를 출력하고 break를 호출한 뒤 while문을 빠져나가게 됩니다. 

이번에는 continue에 대해서 알아보도록 하겠습니다. break가 반복문을 멈추고 바로 탈출하게 해주었다면 continue는 호출되면 지금 돌고 있는 루프를 건너뛰고 다음 루프로 넘어가게 됩니다.

treehit=0
while treehit<10:
    treehit=treehit+1
    if treehit%2==1:
        continue
    print("나무를 %d 번 찍었습니다." % treehit)
        
    if treehit==10:
        print("나무가 넘어갑니다")

(결과)
나무를 2번 찍었습니다.
나무를 4번 찍었습니다.
.
.
.
나무를 10번 찍었습니다.
나무가 넘어갑니다.

        
위의 코드에서 treehit를 2로 나눈 나머지가 1인지 확인하는 if문과 그 내용으로 continue가 보입니다. 이경우에는 treehit가 홀수인지 확인하고, 만약 홀수가 맞다면 아래의 내용을 건너뛰고 다시 while문의 조건부 파트로 돌아가게 됩니다. 즉, treehit가 홀수일때는 아래의 나무를 몇번찍었는지 알려주는 문구를 출력하지 못하게 되겠죠.


이번에는 for문에 대해 알아보도록 하겠습니다. for문은 파이썬의 직관적인 특징을 가장 잘 대변해주며, 매우 유용하고 문장 구조가 한눈에 잘 들어온다는 장점이 있습니다. 

먼저 for문은 변수파트와 리스트(또는 튜플,문자열 등) 파트, 그리고 내용 파트로 나누어져 있습니다. 만약 for문이 수행된다면 리스트 파트의 리스트나 튜플,문자열의 첫번째 요소부터 마지막 요소까지 차례대로 변수에 대입하여 내용을 수행하게 됩니다. 아래의 예시를 통해 for문의 동작을 확인해보도록 하겠습니다.

number=['one','two','three']
for i in number:
    print(i)

(결과)
one
two
three

위의 코드를 실행하게 된다면, number 리스트의 첫번째 요소인 'one'부터 시작하여 차례대로 i에 대입한 뒤, print문을 실행하게 됩니다. 따라서 위와 같은 결과를 확인할 수 있습니다.

이처럼 while문과 for문을 사용하면 반복되거나 특정 규칙을 가진 행동에 대해 빠르고 직관적으로 코드를 작성할 수 있습니다. 이제 실습 문제를 진행해주세요.

1. while문을 사용하여 1부터 100까지의 자연수 중 3의 배수의 합을 구하는 프로그램을 작성해주세요.

2. for문을 사용하여 어떤 학급의 10명의 점수의 평균을 추력하는 프로그램을 작성해주세요.
scores=[70,60,65,55,75,95,90,80,85,100]
