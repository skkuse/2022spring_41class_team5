이번 실습에서는 파이썬에서 메소드와 클래스를 작성하는 법에 대해 공부해보겠습니다. 메소드 대신 '함수'라는 말을 사용하기도 하는데, 파이썬에서는 메소드라는 단어를 자주 사용하므로 메소드로 통일하여 칭하도록 하겠습니다. 

메소드를 사용하는 이유는 반복적인 코드를 피할 수 있고, 프로그램의 흐름을 일목요연하게 볼 수 있기 때문입니다. 메소드는 기본적으로 다음과 같은 방식으로 작성을 합니다. 

def add(a,b):
    return a+b

메소드를 선언할 때 파이썬에서는 def를 이용하여 선언합니다. 위의 코드는 'add'라는 이름의 메소드를 선언한 것입니다. 또한 메소드가 입력으로 받아야할 인자들은 소괄호안에 순서대로 나열합니다. 마지막으로 return을 이용하여 메소드가 반환해야할 값을 지정해줄 수 있습니다. 

따라서 위의 코드는 'add라는 이름의 메소드를 선언하는데, 이 add 메소드는 a와 b를 입력으로 받아 그 둘을 더한 값을 반환한다'라고 해석할 수 있습니다. 이렇게 만든 메소드를 사용할때는 다음과 같이 함수에 원하는 인자를 넣어서 사용하면 됩니다.

add(3,4)

(결과)
7


메소드는 항상 입력값을 받지는 않습니다. 예시로 다음의 코드를 보겠습니다. 

def one():
    return 1

위의 메소드는 아무런 인자도 받지 않습니다. 다만 호출되었을때 1이라는 값을 반환합니다.


또한 메소드는 항상 결과값을 반환할 필요도 없습니다. 다음의 코드를 보겠습니다. 

def say():
    print('hi')

say()

(결과)
hi

위의 say 메소드는 호출되면 'hi'라는 문자열을 출력한뒤에 아무것도 반환하지 않고 종료됩니다.

파이썬의 메소드는 여러개의 결괏값을 반환할 수 있습니다. 파이썬의 강력한 기능 중 하나입니다. 파이썬은 반환하는 값이 여러개라면 반환값을 튜플 형태로 묶어서 반환해줍니다.

def add_and_mul(a,b):
    return a+b,a*b
    
위의 add_and_mul 메소드는 인자로 a와b를 받아 둘을 더한 값과 곱한 값을 반환합니다. 이를 받을 때에는 다음과 같은 방식으로 받을 수 있습니다. 

ret=add_and_mul(3,4)
ret

(결과)
(7,12)


이 경우에는 ret라는 변수가 7과 12라는 값을 가지고 있는 튜플, 즉 (7,12)가 되겠죠. 또는 다음과 같은 방식으로도 값을 받을 수가 있습니다. 

add,mul=add_and_mul(3,4)

이 경우에는 add는 7의 값을, mul은 12의 값을 각각 반환받을 수 있습니다. 


이로써 파이썬의 메소드의 기능을 살펴보았습니다. 이번 실습 문제를 진행해주세요.

1.주어진 자연수가 홀수가 맞는지 판별해주는 함수(is_odd)를 작성해주세요. 메소드의 반환값은 불리언(bool)값입니다.

2.1부터 주어진 자연수까지의 합을 구해주는 함수(sum)을 작성해주세요. 
