이번 실습에서는 프로그래밍에서 조건을 판단하여 해당 조건에 맞는 상황을 수행하는 if문에 대해 공부해보도록 하겠습니다. 이런 if문을 조건문이라고 합니다.

다음과 같은 상황을 생각해보겠습니다.
'돈이 있으면 택시를 타고, 돈이 없으면 걸어 간다.'

이러한 상황을 파이썬에서는 다음과 같이 표현합니다.

money=True
if money:
    print("택시 타고 가자")
else:
    print("걸어가자")


if문은 뒤에 따라 오는 조건이 참인지 거짓인지를 판단한뒤에 참이라면 해당 문장을 수행하게 됩니다. 즉, 위에서는 money가 True값을 가지고 있으므로 "택시 타고 가자"라는 문장이 결과로 나오게 되겠죠.

만약 다음과 같은 상황이 있다면 어떻게 표현할까요?
'돈이 3000원 이상이라면 택시를 타고, 돈이 3000원보다는 적지만 1000원 이상이라면 자전거를 대여하고, 돈이 1000원 미만이라면 걸어가자'
파이썬에서는 이처럼 2가지 이상의 상황에 대해 else if를 줄인 elif를 사용하여 표현합니다. 아래의 코드에서 확인하시길 바랍니다.

if money>=3000:
    print("택시 타고 가자")
elif money>1000 and money<3000:
    print("자전거 타고 가자")
else:
    print("걸어 가자")

그런데 왜 다음처럼 if문을 세번 사용하여 나타내지 않을까요?

if money>=3000:
    print("택시 타고 가자")
if money>=1000 and money<3000:
    print("자전거 타고 가자")
if money<1000:
    print("걸어 가자")

위의 코드를 실행해보면 결과는 똑같이 나오지만 프로그램 내부에서 동작하는 방식이 다릅니다. if-elif-else의 경우 if부터 아래로 이동하며 조건문을 실행하고 조건문이 실행되면 그 즉시 조건문 탐색을 멈추고 다른 문장으로 넘어가게 됩니다. 즉, if문을 만족시키면 elif문과 else문은 생략하고 다음 문장을 수행합니다.

하지만 if문을 연달아 세 번 사용하면, 프로그램 내에서 모든 if문의 조건문을 한번씩 수행하게 됩니다. 즉, 결과는 같아도 내부동작이 비효율적입니다. 만약 프로그램의 규모가 커지고 if문의 개수가 많아진다면 그만큼 필요없는 동작을 수행하는 빈도가 높아지므로 if-elif-else문을 사용하는 것이 효율적입니다.

if문은 조건이 참인지 거짓인지 판단한다고 앞에서 말씀드렸습니다. 따라서 연산의 결과로 True나 False가 나오는 연산들에 대해 알아보도록 하겠습니다.

1) 비교연산자
x<y : x가 y보다 작다면 True, 아니라면 False반환
x>y : x가 y보다 크다면 True, 아니라면 False반환 
x==y : x와 y가 같다면 True, 아니라면 False반환
x!=y : x와 y가 다르다면 True, 아니라면 False반환
x<=y : x가 y보다 작거나 같다면 True, 아니라면 False반환
x>=y : x가 y가 크거나 같다면 True, 아니라면 False반환

2) 논리연산자
x or y : x나 y중 하나라도 True라면 True, 아니라면 False반환
x and y : x와 y 모두 True라면 True, 아니라면 False반환
not x : x가 True라면 False를, x가 False라면 True반환


위의 연산자들은 반환값이 True이거나 False이므로 if문에서 가장 많이 사용되는 연산자들입니다. 

마지막으로 파이썬에서는 다른 프로그래밍 언어에서 쉽게 볼 수 없는 재미있는 조건문을 제공합니다. 바로 in 조건문입니다. in조건문은 어떤 변수가 리스트나 튜플, 문자열에 존재하는지 확인합니다. 아래의 예시 코드를 확인해보겠습니다. 

1 in [1,2,3]

1 not in [1,2,3]

(결과) True False


위의 첫번째 코드에서 1은 [1,2,3]에 존재하므로 결과로 True를 반환합니다. 하지만 두번째 코드에서 not in을 사용하는 경우 False를 제공하게 되겠죠.

지금까지 파이썬의 조건문에 대해서 알아보았습니다. 이제 실습 문제를 진행해주세요.


1. 어떤 학생의 점수가 90점이상이라면 'A'를, 90점 미만 80점 이상이라면 'B'를, 80점 미만이라면 'C'를 성적으로 매기는 프로그램을 작성하세요.

2. 다음의 fruits 리스트에 원하는 과일이 존재한다면 'yummy!'를, 존재하지 않는다면 'hungry!'를 출력하는 프로그램을 작성해주세요.
fruits=['apple','banana','mango','grapes','peach']


