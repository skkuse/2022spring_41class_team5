이번 실습에서는 파이썬에서 class를 작성하는 방법에 대해 알아보겠습니다.


Class는 프로그래밍에서 객체를 표현하기 위한 문법입니다. 여기서 객체는 특정한 개념이나 모양이 존재하는 것을 지칭합니다. 예를 들어 입력값으로 받은 숫자로 사칙연산을 하는 계산기 프로그램을 만든다고 가정해보겠습니다. 여기서 객체는 계산기가 되겠죠. 이 계산기 class는 숫자를 입력으로 받아 덧셈, 뺄셈, 곱셈, 나눗셈을 하는 기능을 가지고 있어야 합니다. 지금부터 이를 구현해보도록 하겠습니다. 


파이썬에서 class를 작성하기 위해서는 다음과 같이 class 선언을 해야합니다.

class Calculator:
    def __init__(self):
        self.result=0

이때 __init__()이라는 메소드는 생성자(Constructor)입니다. 생성자는 객체의 초깃값을 설정해주며 객체가 생성될 때 자동으로 호출되는 메소드입니다. 생성자를 통해 Calculator 클래스의 result값을 0으로 초기화해줍니다. 이때 result라는 변수 앞에 self가 붙는데, 이는 지금 만든 class의 객체에 속하는 변수라는 것을 알려주기 위해 사용합니다. 

이제 사칙연산에 대한 메소드를 만들차례입니다. 앞 실습에서 배운 메소드로 구현한다면 아마 다음과 같은 코드를 완성할 수 있을 것입니다. 

def add(result,num):
    return result+num

def sub(result,num):
    return result-num

def mul(result,num):
    return result*num

def div(result,num):
    return result/num

클래스에서 메소드를 정의할때에는 마찬가지로 class내부에 적어주면 됩니다.

class Calculator:
    def __init__(self):
        self.result=0
    
    def add(self,result,num):
        return result+num

    
    def sub(self,result,num):
        return result-num

    
    def mul(self,result,num):
        return result*num

    
    def div(self,result,num):
        return result/num

한가지 주의할 점은 항상 메소드는 첫번째 인자로 객체 자신을 받아야한다는 것입니다. 따라서 모든 메소드는 첫번째 인자로 self를 가지고 있습니다.


그런데 위의 코드에서 result값은 이미 객체 내에 존재하고 있습니다. 따라서 다음과 같이 코드를 작성하는 것이 조금 더 자연스럽겠죠.

class Calculator:
    def __init__(self):
        self.result=0
    
    def add(self,num):
        self.result+=num
        return self.result

    
    def sub(self,num):
        self.result-=num
        return self.result

    
    def mul(self,num):
        self.result*=num
        return self.result

    
    def div(self,num):
        self.result/=num
        return self.result

이로써 계산기 class를 완성하였습니다. 이제 만든 class를 사용하는 방법에 대해 알아보겠습니다.
먼저 class의 인스턴스를 만드는 방법은 다음과 같습니다.

cal1=Calculator()

계산기 class의 생성자는 자기 자신의 result값을 0으로 초기화시켜주므로 위의 cal1 객체는 0을 값으로 가지는 result 변수를 지니고 있겠죠.

만일 이 class의 메소드를 사용하고 싶다면 다음과 같이 도트(.)연산자를 이용하여 메소드를 호출할 수 있습니다.

cal1.add(3)

물론 이 메소드의 반환값은 3이 될 것입니다. 마찬가지로 다른 메소드들도 호출할 수 있습니다.

cal1.mul(2)
cal1.sub(4)
cal1.div(10)
.
.
.

만약 두개의 계산기를 사용하고 싶다면 다음과 같이 서로 다른 두개의 Calculator 인스턴스를 생성하면 됩니다.
cal1=Calculator()
cal2=Calculator()

이렇게 생성된 두 객체는 서로에게 영향을 끼치지 않고 독립적으로 동작하게 됩니다.


지금까지 파이썬의 class에 대해 학습을 해보았습니다. 이번 실습 문제를 진행해주세요.

1. 위에서 작성한 Calculator 클래스에 계산 기록을 저장하는 history 변수(배열)를 추가하고 각 메소드를 실행할때마다 결과를 저장하는 코드를 작성해주세요.

2. 1에서 작성한 Calculator에 history를 비우고 result를 0으로 초기화시켜주는 reset메소드를 추가해주세요.





