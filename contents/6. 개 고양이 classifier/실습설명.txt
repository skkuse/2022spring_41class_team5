이제 저희 실습의 마지막 목표인 개/고양이 이미지 Classifier를 만들 차례입니다. 저희가 실습할 코드는 딥러닝 기반의 알고리즘을 바탕으로 입력으로 받은 사진이 개인지 고양이인지 분류하여 결과를 돌려줍니다. 파이썬에는 딥러닝 패키지가 여러개 존재하는데, 저희는 그 중 tensorflow에서 제공하는 api인 Keras를 사용할 것입니다. 

저희가 제공하는 실습은 CNN(합성곱 신경망)을 이용한 개/고양이 이미지 Classifier입니다. 

먼저 학습에 필요한 데이터세트를 준비해보겠습니다. 이 사이트에서는 실습의 편의를 위해 이미 개와 고양이 사진 각 2000장을 제공합니다. 


다음과 같이 데이터 전처리를 위한 클래스를 만들어줍니다. 

class data_preprocessor():
    def __init__(self,path):
        self.path=path

data_preprocessor클래스는 입력값으로 받은 이미지 사진의 경로를 저장합니다.

이제 주어진 주어진 사진 경로에 접근하여 이미지를 전처리하여 numpy형식으로 바꾸어 저장해보도록 하겠습니다. 다음의 data_preprocess메소드를 이용하여 위의 내용을 구현할 수 있습니다. 


class data_preprocessor():
    def __init__(self,path):
        self.path=path
    
    def data_preprocess(self):

        path_dog=self.path+'/dogs'
        path_cat=self.path+'/cats'

        # bring dog images : lable 0
        x_dogs=[np.array(image.load_img(path_dog+'/dog.{}.jpg'.format(i+1),target_size=(150,150))) for i in range(0,1500)]

        # bring cat images : lable 1
        x_cats=[np.array(image.load_img(path_cat+'/cat.{}.jpg'.format(i+1),target_size=(150,150))) for i in range(0,1500)]

        x_dogs=np.array(x_dogs)
        x_cats=np.array(x_cats)

        # make target and lables
        x_data=np.concatenate((x_dogs,x_cats))
        y_data=np.concatenate((np.full(len(x_dogs),0),np.full(len(x_cats),1)))
        
        x_data=x_data.astype('float32') / 255.

        # make train,test,validation set
        x_train,x_test,y_train,y_test=train_test_split(x_data,y_data,stratify=y_data,test_size=0.1)
        x_train,x_val,y_train,y_val=train_test_split(x_train,y_train,stratify=y_train,test_size=0.1)

        return x_train,y_train,x_val,y_val,x_test,y_test


코드에 대한 설명은 다음과 같습니다. 먼저 강아지와 고양이의 사진이 있는 경로를 각각 선언한뒤에, 150픽셀 x 150픽셀 크기로 이미지를 불러와서 x_dogs와 x_cats 배열에 저장해줍니다. 이때 keras에서 제공하는 preprocessing.image 함수를 사용하여 이미지 파일을 쉽게 불러올 수 있습니다. 이제 강아지와 고양이 배열을 하나로 합쳐 x_data 배열을 만들어준 뒤, 강아지의 분류값을 0, 고양이의 분류값을 1로 만들어 y_data 배열도 만들어줍니다.
 이때, x_data를 float형으로 바꾸어준 뒤, 255로 나누어주는데, 이는 저희가 가져온 이미지는 각 RGB채널의 값이 0~255의 값을 가지기 때문입니다. 신경망은 비교적 작은 값에서 잘 동작하기 때문에 모든 픽셀의 값이 0~1사이에 분포하도록 255로 나누어주었습니다. 
 
 x_data와 y_data가 준비가 되었으면, 이를 학습을 위한 학습세트, 검증을 위한 검증세트 그리고 평가를 위한 테스트 세트로 나누어주어야합니다. 이는 사이킷런에서 제공하는 train_test_split 메소드를 이용하면 쉽게 나누어줄 수 있습니다. 
 
 이제 데이터 세트가 준비가 되었습니다. 이제 학습을 위한 딥러닝 모델을 만들어보겠습니다. Keras에서 제공하는 Sequential 메소드를 이용하여 층을 쌓듯이 모델을 만들 수가 있습니다. 다음의 코드를 확인해보세요.

def get_model():

    model=Sequential()

    model.add(Conv2D(16,(3,3),activation='relu',input_shape=(150,150,3)))
    model.add(MaxPooling2D((2,2)))

    model.add(Conv2D(32,(3,3),activation='relu'))
    model.add(MaxPooling2D((2,2)))

    model.add(Conv2D(64,(3,3),activation='relu'))
    model.add(MaxPooling2D((2,2)))
    
    model.add(Flatten())
    model.add(Dense(512,activation='relu'))
    model.add(Dense(1,activation='sigmoid'))

    model.summary()

    return model

 
 코드에 대한 설명은 다음과 같습니다. 먼저 Sequential, 즉 층을 쌓는 모델을 만들겠다고 선언을 한뒤, 차례차례 층을 쌓아줍니다. 이때 model.add() 메소드를 이용하여 층을 쌓을 수 있습니다. Con2D는 입력으로 input dimension, kernel size, activation function등을 받아 Convolution연산을 하고, MaxPooling2D는 입력으로 kernel_size등을 받아 maxpooling 연산을 진행합니다. 저는 간단하게 세 번의 convolution연산과 pooling연산을 하는 모델을 만들었습니다. 이제 convolution과 pooling연산이 끝나면 flatten()층을 추가하여 연산값을 일렬로 펴주고, Dense() 층을 이용하여 분류를 해줍니다. 코드의 summary() 메소드는 모델의 층에 대한 정보를 보여주는 유용한 메소드입니다. 
 
 이제 학습만 남았네요. 학습을 위한 코드는 다음과 같습니다. 


path='./dataset/'

d=dp.data_preprocessor(path)

x_train,y_train,x_val,y_val,x_test,y_test=d.data_preprocess()

cnn=model.get_model()

cnn.compile(optimizer='adam',loss='binary_crossentropy',metrics=['acc'])

history=cnn.fit(x_train,y_train,epochs=10,batch_size=64,validation_data=(x_val,y_val))

results=cnn.evaluate(x_test,y_test)
print(f'accuracy: {results[1]*100:.2f}')


 코드에 대한 설명은 다음과 같습니다. 먼저 개와 고양이 사진이 있는 파일의 경로를 path로 설정해줍니다. 그 다음 위에서 구현했던 data_preprocessor에 path를 입력으로 주어 전처리를 해줍니다. 또한 학습을 위한 cnn이라는 이름의 모델을 구현해준 뒤에, compile()메소드를 이용하여 모델을 구성합니다. compile() 메소드는 모델이 사용할 optimizer와 loss function 등을 설정해줍니다. 마지막으로 fit() 메소드를 사용하여 모델을 학습시킵니다. fit()함수는 history를 리턴값으로 반환하는데 이 history는 모델이 학습을 진행하면서 얻은 매 에포크에서의 정확도, loss 등의 값을 가지고 있습니다. 마지막으로 저희가 학습을 진행한 모델의 평가를 위해 evaluate() 메소드를 사용하여 모델의 정확도를 계산해줍니다.
 
 지금까지 Keras를 이용하여 개 고양이 classifier를 만들어 보았습니다. 이번 실습의 연습문제는 4개 이상의 층을 1가지는 모델을 작성하고, kernel의 사이즈, input dimension등의 크기를 달리하여 학습을 진행해보는 것입니다. 정확도 75% 이상의 모델을 작성해보세요.
 
 1. 4개 이상의 층을 가진 모델을 학습하여 정확도 75% 이상을 달성하세요.

